---
title: "C7M2L3A1:Sandbox Activity"
output: html_document
---

## Background for this activity
[WRITER TO EDIT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)
- Indicate this is a preview of many of the cool things you can do in `R` that we will learn!
- Include a note to learners that they are entering the sandbox and the goal is to give them an opportunity to see how some of the cool functions in R work. They will play with packages and data but will learn more about all of the functions they will see as they go through the course.
- Map out the remainder of the reading, give learners the story - the why we include a sandbox â†’ We want them to be excited about what they can do with data.

## Step 1: Using `R packages`
[WRITER TO EDIT]

`Packages` are a key part of working with `R`: they contain bundles of code, called `functions`, that allow you to do a wide range of things as an analyst. They can also contain datasets that you can practice working with to hone your skills.

Some `packages` are installed by default, but many others can be downloaded from an external source such as CRAN (the Comprehensive R Archive Network).

In this activity, we will be using a package called `tidyverse`. When we install it, we are actually installing a number of individual `packages` that allow us to do a wide variety of analysis tasks.

To install the `tidyverse` package, execute the code in the code chunk below by clicking on the green arrow button in the top right hand corner.

```{r}
install.packages("tidyverse")
```

Once a package is installed, we can load it by running the `library()` function with the package name inside the parentheses:

```{r}
library(tidyverse)
```

Once you execute the code in the chunk above, you will see a report generated that tells you what packages were loaded (or attached) because you ran the `library()` function. The report will also tell you what `functions` have a conflict, but we don't need to worry about that for now. Generally speaking results from a code chunk in `R markdown` will show up beneath the chunk, and also in the RStudio Console pane. 

Great! You just loaded an `R package`! Now let's explore some data!

# Step 2: Viewing data

Many of the `tidyverse` packages contain sample datasets that we can use to practice our `R` skills. We can use one of those, the `diamonds` dataset contained in the `ggplot2` package, to preview some key functions for analysis.

Because we loaded our package in the last step, the `diamonds` is ready for us to use.

One common function we can use to take a look at the data is the `head()` function, which show the columns and the first several rows of data. You can see how the `head()` function works by running the chunk below:

```{r}
head(diamonds)
```

In addition to `head()` there are a number of other useful functions to summarize or preview the data we are looking at. For example, the `str()` and `glimpse()` functions will both show you summaries of each column in your data arranged horizontally. You can see these two functions in action by running the code chunks below:

```{r}
str(diamonds)
```

```{r}
glimpse(diamonds)
```

Another simple function that you may use regularly is the `colnames()` function: it tells you the names of all of the columns in the data:

```{r}
colnames(diamonds)
```

The number in brackets at the far right of the output once you run the chunk above helps you count the number of columns: if you have data with lots of columns and `colnames()` prints the results on multiple lines, each line will have a number in brackets at the start of the line indicating what number column that is! So, for example, if you have twenty columns in your data, and that is printed across two lines of ten column names each, the number in the second line will tell you that the first element in the second row is column number [11].

## Step 3: Cleaning data

One of the most frequent tasks you will have as an analyst is to clean and organize your data. `R` makes this easy! There are many functions you can use to help you perform important tasks easily and quickly. 

For example, you might need to rename the columns, or variables, in your data. There's a function for that called `rename()`! You can see how it works in the chunk below:

```{r}
rename(diamonds, carat_new = carat)
```

We used the function to change the name of `carat` to `carat_new`. This is a pretty basic change, but rename has many options that can help you do more complex changes across all of the variables in your data.

For example, you can rename more than one variable in the same `rename()` code. The code below shows how:

```{r}
rename(diamonds, carat_new = carat, cut_new = cut)
```

Another handy function for summarizing your data is called `summarize()`. You can use it to generate a wide range of summary statistics for your data. For example, if you wanted to know what the mean `carat` in the dataset, you could run the code in the chunk below:

```{r}
summarize(diamonds, mean_carat = mean(carat))
```

## Step 4: Visualizing data

Finally, we can't introduce working with `R` without talking about how you can use it to make great visuals with it! One of the most commonly used visualization packages is the `ggplot2` package, which is loaded automatically when you install and load `tidyverse` (our data, the `diamonds` dataset, is a `ggplot2` dataset).

To build a visualization with `ggplot2` you layer plot elements together with a `+` symbol. You will learn a lot more about using `ggplot2` later in the course, but here's a preview of how easy and flexible it is to make visuals using code:

```{r}
ggplot(data = diamonds, aes(x = carat, y = price)) +
  geom_point()
```

The code above takes the `diamonds` data, plotted carat on the X-axis and price on the Y-axis, and represented the data as a scatterplot using the `geom_point()` command. 

`ggplot2` makes it easy to modify or improve our visuals. For example, if we wanted to change the color of each point so that it represented another variable, the cut of the diamond, we can change our code like this:

```{r}
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
  geom_point()
```

Wow, that's a busy visual! Sometimes when we are trying to represent many different aspects of our data in a visual, it can help to separate out some of the components. For example, we could create a different plot for each type of cut. `ggplot2` makes it easy to do this with the `facet_wrap()` function:

```{r}
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
  geom_point() +
  facet_wrap(~cut)
```

You will learn many other ways of working with `ggplot2` to make functional and beautiful visuals later on. For now, hopefully you can see it is both flexible and powerful!

## Step 5: Documentation

We have been working in an `R markdown` file, which allows us to put our code and writing in the same place. Markdown is a simple language for adding formatting to text documents. For example, all of the section headers have been formatted by adding `##` to the beginning of the line. Markdown can be used to format the text in other ways, such as creating bulleted lists:

- So if you have a list of things
- Or want to write bullets for another reason
- You can do that using markdown

When you have written, executed, and documented your code in an `R markdown` document like this, you can use the `knit` button in the menu bar at the top of the editing pane to export your work to a beautiful, readable document for others. 

## Activity Wrap Up
Note to editor - We will need to add a wrap up section at the end of all of these activities. 

Review what was learned and encourage learners to modify the rmd to do more creative things or work in RStudio using the code from here.

Also include reflective  components.


















