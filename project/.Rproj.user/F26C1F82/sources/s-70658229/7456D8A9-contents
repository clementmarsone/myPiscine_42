---
title: "C7M3L3A1: Cleaning Data"
output: html_document
---

## Background for this activity / Introduction
[WRITER TO EDIT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

## The Scenario
[WRITER TO CONSTRUCT]
- You work at a large grocery company with many different brands
- You have been asked to clean a CSV file
- Data is the result of querying a database to combine two different tables from two organizations. 
- Use functions to learn about the data in terms of columns, rows, and so forth
- Use functions to conduct basic clearing of data

## Step 1: Load packages

We'll start by installing our required packages. If you have already installed and loaded `tidyverse`, `skimr`, and `janitor` in this session, feel free to skip the code chunks in this step.

```{r}
install.packages("tidyverse")
install.packages("skimr")
install.packages("janitor")
```

Once a package is installed, we can load it by running the `library()` function with the package name inside the parentheses:

```{r}
library(tidyverse)
library(skimr)
library(janitor)
```

## Step 2: Import data

Often analysts will need to import data from other environments. One of the most common file types in this context is comma separated values file, or a .csv file. The `tidyverse` library `readr` has a number of functions for "reading in" or importing data, including but not limited to .csv's. 

In the chunk below, we'll use the `read_csv()` function to import data from a .csv in the project folder called "hotel_bookings.csv" and save it as a data frame called `hotel_bookings`:

```{r}
hotel_bookings <- read_csv("hotel_bookings.csv")
```

## Step 3: Getting to know your data

One common function we can use to take a look at the data is the `head()` function, which show the columns and the first several rows of data. You can see how the `head()` function works by running the chunk below:

```{r}
head(hotel_bookings)
```

In addition to `head()` there are a number of other useful functions to summarize or preview the data we are looking at. For example, the `str()` and `glimpse()` functions will both show you summaries of each column in your data arranged horizontally. You can see these two functions in action by running the code chunks below:

```{r}
str(hotel_bookings)
```

```{r}
glimpse(hotel_bookings)
```

Remember - you can also use colnames() to look at the name of all the columns in your data set. Run the code chunk below to see the column names in this dataset.

```{r}
colnames(hotel_bookings)
```

Some packages contain more advanced functions for summarizing and getting to know your data. One example is the `skimr` package, which has a number of functions for this purpose. For example, the `skim_without_charts()` function provides a detailed summary of the data. Take a look by running the code below:

```{r}
skim_without_charts(hotel_bookings)
```

# Step 4: Cleaning your data

Based on your notes you are primarily interested in the following variables: hotel, is_canceled, lead_time. Create a new data frame with just those columns, calling it `trimmed_df`.

```{r}
trimmed_df <- hotel_bookings %>% 
  select(hotel, is_canceled, lead_time)
```

One thing you will notice about the code above, some of the column names might not be intuitive, so you want to rename them so you understand what they are. You might want to create the same exact dataframe as above, but rename the variable 'hotel' to be named 'hotel_type' to be crystal clear on what the data is about.

```{r}
#solution - modify or remove
trimmed_df %>% 
  select(hotel, is_canceled, lead_time) %>% 
  rename(hotel_type = hotel)
```

Finally, one common task is to either split or combine data in different columns. In this example, we can combine the arrival month and year into one column using the unite() function.

```{r}
example_df <- hotel_bookings %>%
  select(arrival_date_year, arrival_date_month) %>% 
  unite(arrival_month_year, c("arrival_date_month", "arrival_date_year"), sep = " ")
```

# Step 5: Another way of doing things

Let's say you wanted to create a new column that summed up all the adults, children, and babies on a reservation for the total number of people. How would you do that? 

```{r}
#solution - modify or remove
example_df <- hotel_bookings %>%
  mutate(guests = adults + children + babies)

head(example_df)
```

Great. Now it's time to calculate some summary statistics! Calculate the total number of cancelled bookings and the average lead time for booking . Hint: use the `summarize()` function

```{r}
#solution - modify or remove
example_df <- hotel_bookings %>%
  summarize(number_cancelled = sum(is_canceled),
            average_lead_time = mean(lead_time))

head(example_df)
```


## Activity Wrap Up
Note to editor - We will need to add a wrap up section at the end of all of these activities. 

Review what was learned and encourage learners to modify the rmd to do more creative things or work in RStudio using the code from here.

Also include reflective  components.








