---
title: "C7M3L3A2: Wide to Long data"
output: html_document
---

## Background for this activity / Introduction
[WRITER TO EDIT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

## The Scenario
[WRITER TO CONSTRUCT]
- You work at a large grocery company with many different brands
- You have been asked to clean a CSV file
- Data is the result of querying a database to combine two different tables from two organizations. 
- Use functions to learn about the data in terms of columns, rows, and so forth
- Use functions to conduct basic data manipulation of converting data from wide to long format.

## Step 1: Load packages

We'll start by installing our required packages. If you have already installed and loaded `tidyverse`, `skimr`, and `janitor` in this session, feel free to skip the code chunks in this step.

```{r}
install.packages("tidyverse")
install.packages("skimr")
install.packages("janitor")
```

Once a package is installed, we can load it by running the `library()` function with the package name inside the parentheses:

```{r}
library(tidyverse)
library(skimr)
library(janitor)
```

## Step 2: Import data

Often analysts will need to import data from other environments. One of the most common file types in this context is comma separated values file, or a .csv file. The `tidyverse` library `readr` has a number of functions for "reading in" or importing data, including but not limited to .csv's. 

In the chunk below, we'll use the `read_csv()` function to import data from a .csv in the project folder called "supermarket_sales.csv" and save it as a data frame called `sales_df`:

```{r}
sales_df <- read_csv("supermarket_sales.csv")
```

## Step 3: Getting to know your data

One common function we can use to take a look at the data is the `head()` function, which show the columns and the first several rows of data. You can see how the `head()` function works by running the chunk below:

```{r}
head(sales_df)
```

In addition to `head()` there are a number of other useful functions to summarize or preview the data we are looking at. For example, the `str()` and `glimpse()` functions will both show you summaries of each column in your data arranged horizontally. You can see these two functions in action by running the code chunks below:

```{r}
str(people)
```

```{r}
glimpse(people)
```

Remember - you can also use colnames() to look at the name of all the columns in your data set. Run the code chunk below to see the column names in this dataset.

```{r}
colnames(people)
```


## Functions to cover in these sections

Arrange, group by, filter, drop na, summarize, max, mean, pivot_longer().





## Activity Wrap Up
Note to editor - We will need to add a wrap up section at the end of all of these activities. 

Review what was learned and encourage learners to modify the rmd to do more creative things or work in RStudio using the code from here.

Also include reflective  components.








