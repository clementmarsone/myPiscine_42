---
title: 'C7M4L2A1: You and GGPlot'
output: html_document
---

## Background for this activity
Welcome to the sandbox! This activity is going to provide you with the opportunity to preview some of the cool things you can do in `R` that you will be learning in this course. You will learn more about working with packages and data and try out some important functions. 

## The Scenario

In this scenario, you are a junior data analyst working for a hotel booking company. You have cleaned and manipulated your data, and gotten some initial insights you would like to share. Now, you are going to create some simple data visualizations with the `ggplot2` package. You will use basic `ggplot2` syntax and troubleshoot some common errors you might encounter.    

## Step 1: Import your data

The data for this example is originally from the article Hotel Booking Demand Datasets (https://www.sciencedirect.com/science/article/pii/S2352340918315191), written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.

The data was downloaded and cleaned by Thomas Mock and Antoine Bichat for #TidyTuesday during the week of February 11th, 2020 (https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md)

You can learn more about the dataset here:
https://www.kaggle.com/jessemostipak/hotel-booking-demand

In the chunk below, you will use the `read_csv()` function to import data from a .csv in the project folder called "hotel_bookings.csv" and save it as a data frame called `hotel_bookings`:

```{r load data}
hotel_bookings <- read.csv("hotel_bookings.csv")
```

## Step 2: Look at a sample of your data

Use the `head()` function to preview your data: 
```{r examining your data}
head(hotel_bookings)
```

You can also use `colnames()` to get the names of all the columns in your data set. Run the code chunk below to find out the column names in this data set:

```{r look at column names}
colnames(hotel_bookings)
```

## Step 3: Install and load the 'ggplot2' package

If you haven't already installed and loaded the `ggplot2` package, you will need to do that before you can use the `ggplot()` function. 

Run the code chunk below to install and load `ggplot2`. This may take a few minutes.

```{r loading and installing ggplot2, echo=FALSE, message=FALSE}
install.packages('ggplot2')
library(ggplot2)
```

## Step 4: Begin creating a plot

A stakeholder tells you, "I want to target people who book early, and I have a hypothesis that people with children have to book in advance."

You want to create a visualization to see how true that statement is-- or isn't.

You can use `ggplot2` to do this. Try running the code below:

```{r creating a plot}
ggplot(data = hotel_bookings) +
  geom_point(mapping = aes(x = lead_time, y = children))
```

On the x-axis, it lists how far in advance a booking is made, with the bookings furthest to the right happening the most in advance. On the y-axis it lists how many children there are in a party.

You are able to report back to your stakeholder that many of the advanced bookings are being made by people with 0 children. 

## Step 5: Remembering a common error

Putting a + sign at the beginning of the next line instead of the end of the previous line is a common error R users encounter. For example, try running the code chunk below:

```{r common error}
ggplot(data = hotel_bookings) 
 + geom_point(mapping = aes(x = lead_time, y = children))
```

## Step 6: Try it on your own

Try mapping 'Adults' and 'Children' on the x and y axes respectively by filling out the remainder of the code below.
```{r}
ggplot(data = hotel_bookings) +
 geom_point(mapping = aes(x = , y = ))
```
## Activity Wrap Up
The `ggplot2` package allows you to quickly create data visualizations that can answer questions and give you insights about your data. Now that you are a little more familiar with the basic `ggplot2` syntax, you can practice these skills by modifying the code chunks in the rmd file, or use this code as a starting point in your own project console. With `ggplot2`, you will be able to create and share data visualizations without leaving your `R` console. You will learn more about `ggplot2` throughout this course and eventually create even more complex and beautiful visualizations!
