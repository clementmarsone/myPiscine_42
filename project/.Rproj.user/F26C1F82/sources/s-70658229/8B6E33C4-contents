---
title: "C7M3L3A2: Wide to Long data"
output: html_document
---

arrange()
group_by()
filter()
drop_na()
summarize()
max()
mean()

## Background for this activity / Introduction
[WRITER TO EDIT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

## The Scenario
[WRITER TO CONSTRUCT]
- You work at a large grocery company with many different brands
- You have been asked to clean a CSV file
- Data is the result of querying a database to combine two different tables from two organizations. 
- Use functions to learn about the data in terms of columns, rows, and so forth
- Use functions to conduct basic data manipulation of converting data from wide to long format.

## Step 1: Load packages

We'll start by installing our required packages. If you have already installed and loaded `tidyverse`, `skimr`, and `janitor` in this session, feel free to skip the code chunks in this step. This may take a few minutes to run, and you may also see a pop-up asking if you want to proceed.

```{r install packages}
install.packages("tidyverse")
install.packages("skimr")
install.packages("janitor")
```

Once a package is installed, we can load it by running the `library()` function with the package name inside the parentheses:

```{r load packages}
library(tidyverse)
library(skimr)
library(janitor)
```

## Step 2: Import data

Often analysts will need to import data from other environments. One of the most common file types in this context is comma separated values file, or a .csv file. The `tidyverse` library `readr` has a number of functions for "reading in" or importing data, including but not limited to .csv's. 

In the chunk below, we'll use the `read_csv()` function to import data from a .csv in the project folder called "hotel_bookings.csv" and save it as a data frame called `hotel_bookings`:

The data is originally from the article Hotel Booking Demand Datasets (https://www.sciencedirect.com/science/article/pii/S2352340918315191), written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.

The data was downloaded and cleaned by Thomas Mock and Antoine Bichat for #TidyTuesday during the week of February 11th, 2020 (https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md).

You can learn more about the dataset here:
https://www.kaggle.com/jessemostipak/hotel-booking-demand

```{r load dataset}
hotel_bookings <- read_csv("hotel_bookings.csv")
```

## Step 3: Getting to know your data

One common function we can use to take a look at the data is the `head()` function, which show the columns and the first several rows of data. You can see how the `head()` function works by running the chunk below:

```{r head function}
head(hotel_bookings)
```
[Potential Quiz Question]
How many columns are in this datset? Answer: 32
What variable type is 'arrival_date_month' of? Answer: chr, short for character 

You can see that this dataset contains information on hotel bookings, with each booking being a row in the dataset, and each column containing information such as what type of hotel was booked, when the booking took place, and how far in advance the booking took place (the 'lead_time' column).

In addition to `head()` there are a number of other useful functions to summarize or preview the data we are looking at. For example, the `str()` and `glimpse()` functions will both show you summaries of each column in your data arranged horizontally. You can see these two functions in action by running the code chunks below:

```{r str function}
str(hotel_bookings)
```

You can see the different column names and some sample values to the right of the colon. 

```{r glimpse function}
glimpse(hotel_bookings)
```

Remember - you can also use colnames() to look at the name of all the columns in your data set. Run the code chunk below to see the column names in this dataset.

```{r colnames function}
colnames(hotel_bookings)
```


## Manipulating your data

Let's say you want to arrange the data by most lead time to least amount of lead time, because you want to focus on bookings that were made far in advance. You decide you want to try using the arrange function and run the following command. 

```{r arrange function}
arrange(hotel_bookings, lead_time)
```


Wait! Why are there so many zeroes? That's because arrange automatically orders by ascending order, and you need to specifically tell it when to order by descending order - like the below.

```{r arrange function descending} 
arrange(hotel_bookings, desc(lead_time))
```

There! 

[Potential Quiz Question]
Question: What's the highest lead time someone booked a hotel room for?
Answer: 737 
Feedback: That's over 2 years early!

Notice, when you just run arrange() without saving your data to a new dataframe, it does not alter the existing data frame. Check it out by running head() again to see if the highest lead times are first.

```{r head function part two}
head(hotel_bookings)
```

This will be true of all the functions we'll be using in this activity. If you wanted to create a new dataframe that had those changes saved, you'd use the <- like below, where we'll store the arranged data in a dataframe named 'hotel_bookings_v2'

```{r new dataframe}
hotel_bookings_v2 <-
  arrange(hotel_bookings, desc(lead_time))
```

You can take a peek at this new dataframe and check it out for yourself

```{r new dataframe part two}
head(hotel_bookings_v2)
```

Could you have figured out what the maximum and minimum lead times were without sorting the whole dataset using the arrange() function though? Try it out using the max() and min() functions below!

```{r}
max(hotel_bookings$lead_time)
```

```{r}
min(hotel_bookings$lead_time)
```

Remember, in this case, you need to specify which dataset and which column, using the $ symbol between their names. Try running the below to see what happens if you forget one of those pieces!

```{r}
min(lead_time)
```

This is a common error that R users encounter!

Now, let's say you just want to know what the average lead time for booking is, because your boss asks you how early you should run promotions for hotel rooms. You can use the mean() function to answer that question!

```{r mean}
mean(hotel_bookings$lead_time)
```

Notice you should get the same answer even if you use your v2 newly created dataset where you used the arrange() function. This is because the arrange() function doesn't change the values in the dataset, it just re-arranges them.

```{r mean part two}
mean(hotel_bookings_v2$lead_time)
```

[Quiz Question]
What is the average lead time?
Answer: 104.0114

You let your boss know what the average days of lead time is before booking, but now they want to know what it is for just city hotels because the promotion they're planning on running is targeted at major cities. 

No sweat. You realize that your first step will be creating a new dataset that just has city hotels. You do that using the filter() function, and you name your new dataframe 'hotel_bookings_city')

```{r filter}
hotel_bookings_city <- 
  filter(hotel_bookings, hotel_bookings$hotel=="City Hotel")
```

Take a look at your new dataset!

```{r new dataset}
head(hotel_bookings_city)
```

You quickly check what the average lead time for set of hotels is just as you did for all hotels.

```{r average lead time city hotels}
mean(hotel_bookings_city$lead_time)
```

But now, your boss comes to you and wants to know a lot more information about city hotels, including the maximum and minimum lead time. Oh, and they want to know how it's different from resort hotels. You don't want to have to run each line of code over and over again, so you decide to use group_by() and summarize(). We'll also take advantage of the pipe operator that we learned about to make our code easier to follow. We'll also store our new dataset in a dataframe named 'hotel_summary'

```{r group and summarize}
hotel_summary <- 
  hotel_bookings %>%
  group_by(hotel) %>%
  summarise(average_lead_time=mean(lead_time),
            min_lead_time=min(lead_time),
            max_lead_time=max(lead_time))
```

Take a look at your new dataset using head() again - what do you see?

```{r}
head(hotel_summary)
```


## Activity Wrap Up
Note to editor - We will need to add a wrap up section at the end of all of these activities. 

Review what was learned and encourage learners to modify the rmd to do more creative things or work in RStudio using the code from here.

Also include reflective  components.








