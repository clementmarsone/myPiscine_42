---
title: "C7M3L2A1:Create a data frame"
output: html_document
---

## Background for this activity / Introduction
[WRITER TO EDIT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

Welcome back! In this activity we'll be learning how to create data frames. 

There are three common sources for data:

- Stored in a `package` and accessed by loading that `package`
- Stored in an external file (an Excel file or a CSV, for example) and imported into `R`
- Generate from scratch using `R` code.

Wherever data comes from, the most common way of working with it in `R` is to store it in a data frame object.

In this activity, we'll be learning how to create our own data frames.

## Step 1: Load packages

We'll start by installing our required package. If you have already installed and loaded `tidyverse` in this session, feel free to skip the code chunks in this step.

```{r}
install.packages("tidyverse")
```

Once a package is installed, we can load it by running the `library()` function with the package name inside the parentheses:

```{r}
library(tidyverse)
```

## Step 2: Create data frame

Sometimes you need to generate a data frame in `R` directly. There are a number of ways to do this; one of the most common is to create individual vectors of data and then combine them into a data frame using the `data.frame()` function.

Here's how this works. First, let's create a vector of names:

```{r}
names <- c("Peter", "Jennifer", "Julie", "Alex")
```

Now, let's create a vector of ages:

```{r}
age <- c(15, 19, 21, 25)
```

With these two vectors, we can create a new data frame called `df`:

```{r}
people <- data.frame(names, age)
```

## Step 3: inspect the data frame

now that we have our data frame called `people`, we can use some different functions to inspect it.

One common function we can use to take a look at the data is the `head()` function, which show the columns and the first several rows of data. You can see how the `head()` function works by running the chunk below:

```{r}
head(people)
```

In addition to `head()` there are a number of other useful functions to summarize or preview the data we are looking at. For example, the `str()` and `glimpse()` functions will both show you summaries of each column in your data arranged horizontally. You can see these two functions in action by running the code chunks below:

```{r}
str(people)
```

```{r}
glimpse(people)
```

Remember - you can also use colnames() to look at the name of all the columns in your data set. Run the code chunk below to see the column names in this dataset.

```{r}
colnames(people)
```

Now that you have a data frame, you can work with it using all of the tools in `R`. For example, you could create new columns in the data frame using the `mutate()` function. Say you wanted to create a new variable that would capture each person's age in twenty years. The code chunk below creates that new variable:

```{r}
mutate(people, age_in_20 = age + 20)
```


## Step 4: Try it yourself

Let's use the code chunks below to create your own custom data frame!

First, create a vector of any five different fruits. You can type directly into the code chunk below: just place your cursor in the box and click.

```{r}
#solution - remove
fruit <- c("Apple", "Banana", "Raspberry", "Orange", "Strawberry")
```

Now, create a new vector with a number representing your own personal rank. Give a 1 to the fruit you like the most, and a 5 to the fruit you like the least. Remember, the scores need to be in the same order as the fruit above. So if your favorite fruit is last in the list above, the score `1` needs to be in the last position in the list below.

```{r}
#solution - remove
rank <- c(2, 5, 1, 4, 3)
```

Finally, combine the two vectors into a data frame. You can call it `fruit_ranks`. Use the code chunk below.

```{r}
#solution - remove
people <- data.frame(names, age)
```

## Activity Wrap Up
Note to editor - We will need to add a wrap up section at the end of all of these activities. 

Review what was learned and encourage learners to modify the rmd to do more creative things or work in RStudio using the code from here.

Also include reflective  components.








































