---
title: 'C7M4L2A1: You and GGPlot'
output: html_document
---

## Background for this activity
[WRITER TO CONSTRUCT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

## The Scenario

[WRITER TO CONSTRUCT]
- You work at a large grocery company with many different brands
- You want to share some visuals at a presentation on supermarket trends

## Step 1: Import your data

[WRITER TO EDIT]

If you experience errors, remember that you can search the internet and the RStudio community for help:
https://community.rstudio.com/#

[Note for GwG team: we'll need to follow the same process we did for other Kaggle datasets to make sure we have permission]

In the chunk below, we'll use the `read_csv()` function to import data from a .csv in the project folder called "hotel_bookings.csv" and save it as a data frame called `hotel_bookings`:

The data is originally from the article Hotel Booking Demand Datasets (https://www.sciencedirect.com/science/article/pii/S2352340918315191), written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.

The data was downloaded and cleaned by Thomas Mock and Antoine Bichat for #TidyTuesday during the week of February 11th, 2020 (https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md).

You can learn more about the dataset here:
https://www.kaggle.com/jessemostipak/hotel-booking-demand

```{r load data}
hotel_bookings <- read.csv("hotel_bookings.csv")
```

## Step 2: Look at a sample of your data

Use the head() function to look at your data (remember you can click on the arrows in the header row to look at more columns)

```{r examining your data}
head(hotel_bookings)
```

Remember - you can also use colnames() to look at the name of all the columns in your data set. Run the code chunk below to see the column names in this datset.

```{r look at column names}
colnames(hotel_bookings)
```

## Step 3: Install and load the 'ggplot2' package
Remember, if you haven't already installed and loaded the 'ggplot2' package, you'll need to do that before you can use the ggplot() function. You only have to do this once though, not every time you call ggplot().

Run the code chunk below to install and load 'ggplot2' - this may take a few minutes!

```{r loading and installing ggplot2, echo=FALSE, message=FALSE}
install.packages('ggplot2')
library(ggplot2)
```

## Step 4: Begin creating a plot
[WRITER TO EDIT]
Let's say a stakeholder says to you "I want to target people who book early for promotions, and I have a hypothesis that people with children have to book in advance"

You want to create a visualization to see how true that statement is or isn't.

Great! We can use ggplot to do this. Try running the code below.

```{r creating a plot}
ggplot(data = hotel_bookings) +
  geom_point(mapping = aes(x = lead_time, y = children))
```

On the x-axis, you see how far in advance a booking is made, with the bookings furthest to the right happening the most in advance. On the y-axis you see how many children there are in a party.

"Hmmm," you say to your stakeholder, "I'm not sure that I'm seeing that in the data, as many of the bookings that are to the right have 0 children in the booking."

## Step 5: Remembering a common error
[WRITER TO EDIT]
A common error that R users sometimes encounter is if they put their + sign at the beginning of the next line instead of the end of the previous line. For example, try running the code chunk below to see what happens

```{r common error}
ggplot(data = supermarket_sales) 
 + geom_point(mapping = aes(x = lead_time, y = children))
```

## Step 6: Try it on your own
[WRITER TO EDIT]
Try mapping 'Adults' and 'Children' on the x and y axes respectively by filling out the remainder of the code below.
```{r}
ggplot(data = supermarket_sales) +
 geom_point(mapping = aes(x = , y = ))
```

