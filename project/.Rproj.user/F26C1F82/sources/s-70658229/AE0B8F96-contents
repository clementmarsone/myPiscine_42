---
title: "C7M3L3A1: Cleaning Data"
output: html_document
---

## Background for this activity / Introduction
[WRITER TO EDIT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

## The Scenario
[WRITER TO CONSTRUCT]
- You work at a large grocery company with many different brands
- You have been asked to clean a CSV file
- Data is the result of querying a database to combine two different tables from two organizations. 
- Use functions to learn about the data in terms of columns, rows, and so forth
- Use functions to conduct basic clearing of data

## Step 1: Load packages

We'll start by installing our required packages. If you have already installed and loaded `tidyverse`, `skimr`, and `janitor` in this session, feel free to skip the code chunks in this step.

```{r}
install.packages("tidyverse")
install.packages("skimr")
install.packages("janitor")
```

Once a package is installed, we can load it by running the `library()` function with the package name inside the parentheses:

```{r}
library(tidyverse)
library(skimr)
library(janitor)
```

## Step 2: Import data

Often analysts will need to import data from other environments. One of the most common file types in this context is comma separated values file, or a .csv file. The `tidyverse` library `readr` has a number of functions for "reading in" or importing data, including but not limited to .csv's. 

In the chunk below, we'll use the `read_csv()` function to import data from a .csv in the project folder called "supermarket_sales.csv" and save it as a data frame called `sales_df`:

```{r}
sales_df <- read_csv("supermarket_sales.csv")
```

## Step 3: Getting to know your data

One common function we can use to take a look at the data is the `head()` function, which show the columns and the first several rows of data. You can see how the `head()` function works by running the chunk below:

```{r}
head(sales_df)
```

In addition to `head()` there are a number of other useful functions to summarize or preview the data we are looking at. For example, the `str()` and `glimpse()` functions will both show you summaries of each column in your data arranged horizontally. You can see these two functions in action by running the code chunks below:

```{r}
str(sales_df)
```

```{r}
glimpse(sales_df)
```

Remember - you can also use colnames() to look at the name of all the columns in your data set. Run the code chunk below to see the column names in this dataset.

```{r}
colnames(sales_df)
```

Some packages contain more advanced functions for summarizing and getting to know your data. One example is the `skimr` package, which has a number of functions for this purpose. For example, the `skim_without_charts()` function provides a detailed summary of the data. Take a look by running the code below:

```{r}
skim_without_charts(sales_df)
```

# Step 4: Cleaning your data

Based on your notes you are primarily interested in the following variables: Customer type, Gender, Unit price, Quantity, Tax, and Total. Create a new data frame with just those columns, calling it `trimmed_df`.

```{r}
trimmed_df <- sales_df %>% 
  select(`Customer type`, Gender, `Unit price`, Quantity, `Tax 5%`, Total)
```

One thing you will notice about the code above: because some column names have spaces in them, they need to be enclosed in ticks. Often analysts will clean the column names to replace spaces so this isn't necessary. The `janitor` package has a useful function for this purpose called `clean_names`. You can add this function to the code in the previous chunk to recreate the `trimmed_df` data frame, this time with column names that are easier to use:

```{r}
trimmed_df <- sales_df %>% 
  select(`Customer type`, Gender, `Unit price`, Quantity, `Tax 5%`, Total) %>% 
  clean_names()
```

An alternative to `clean_names()` is to use the `rename()` function:

```{r}
#solution - modify or remove
sales_df %>% 
  select(`Customer type`, Gender, `Unit price`, Quantity, `Tax 5%`, Total) %>% 
  rename(customer_type = `Customer type`,
         unit_price = `Unit price`,
         tax_5_percent = `Tax 5%`)
```

Finally, one common task is to split data encoded in one column into multiple columns. In this example, we could split the `unit_price` into dollars and cents using the `separate()` function:

```{r}
trimmed_df %>% 
  select(unit_price) %>% 
  separate(unit_price, into = c("dollars", "cents"), sep = "\\.")
```

The reverse procedure, combining data into one column, can be accomplished using the `unite()` function:

```{r}
trimmed_df %>% 
  select(unit_price) %>% 
  separate(unit_price, into = c("dollars", "cents"), sep = "\\.") %>% 
  unite(unit_price, c("dollars", "cents"), sep = ".")
```

# Step 4: Analyzing your data

Next, it looks like `total` is based on the unit price, the number of items purchased, and the tax applied. Verify that by creating a duplicate total column (called `total_new`). Hint: you can use the `mutate()` function.

```{r}
#solution - modify or remove
trimmed_df %>% 
  mutate(total_new = unit_price * quantity + tax_5_percent)
```

Great. Now it's time to calculate some summary statistics! Calculate the total Quantity of items purchased and the total value of goods purchased. Hint: use the `summarize()` function

```{r}
#solution - modify or remove
trimmed_df %>%
  summarize(total_Quantity = sum(Quantity),
            total_Total = sum(Total))
```


## Activity Wrap Up
Note to editor - We will need to add a wrap up section at the end of all of these activities. 

Review what was learned and encourage learners to modify the rmd to do more creative things or work in RStudio using the code from here.

Also include reflective  components.








