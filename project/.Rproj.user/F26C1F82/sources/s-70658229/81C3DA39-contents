---
title: "C7M3L2A2: Hands-On - Importing and working with data"
output: html_document
---

## Background for this activity / Introduction
[WRITER TO EDIT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

Welcome back! In this activity we'll be learning how to import data from outside of `R`!

## Step 1: Load packages

We'll start by installing our required package. If you have already installed and loaded `tidyverse` in this session, feel free to skip the code chunks in this step.

```{r}
install.packages("tidyverse")
```

Once a package is installed, we can load it by running the `library()` function with the package name inside the parentheses:

```{r}
library(tidyverse)
```

## Step 2: Import data

Often analysts will need to import data from other environments. One of the most common file types in this context is comma separated values file, or a .csv file. The `tidyverse` library `readr` has a number of functions for "reading in" or importing data, including but not limited to .csv's. 

In the chunk below, we'll use the `read_csv()` function to import data from a .csv in the project folder called "supermarket_sales.csv" and save it as a data frame called `sales_df`:

```{r}
sales_df <- read_csv("supermarket_sales.csv")
```

Now that we have `sales_df` we can work with it using all of our familiar `R` functions!

## Step 3: Inspect & clean data

One common function we can use to take a look at the data is the `head()` function, which show the columns and the first several rows of data. You can see how the `head()` function works by running the chunk below:

```{r}
head(sales_df)
```

In addition to `head()` there are a number of other useful functions to summarize or preview the data we are looking at. For example, the `str()` and function will show you summaries of each column in your data arranged horizontally. You can see this function in action by running the code chunk below:

```{r}
str(sales_df)
```

To see what columns we have in our data frame, we can use the `colnames()` function:

```{r}
colnames(sales_df)
```

If we want to create another data frame using `sales_df` but focusing only on the `Unit price` and `Quantity`, we can use the following code chunk to do that:

```{r}
new_df <- select(sales_df, `Unit price`, Quantity)
```

To create new variables in our data frame, we can use the `mutate()` function. Note: this will make changes to the data frame, but not to the original dataset you imported. That source data will remain unchanged

```{r}
mutate(new_df, total = `Unit price` * Quantity)
```

# Step 4: Import your own data

See if you can find your own .csv to import! Using the RStudio Cloud interface, import and save the file in the same folder as this R Markdown document. Then write code in the chunk below to read that data into `R`:

```{r}
#solution - remove
own_df <- read_csv("<filename.csv>"
```

## Activity Wrap Up

Note to editor - We will need to add a wrap up section at the end of all of these activities. 

Review what was learned and encourage learners to modify the rmd to do more creative things or work in RStudio using the code from here.

Also include reflective  components.

Reflective question: How did importing data from a csv file change the way you accessed your data? What did you do differently?

















