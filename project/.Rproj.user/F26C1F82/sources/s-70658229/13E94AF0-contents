---
title: 'C7M4L4A1: Annotating and Saving'
output: html_document
---

## Background for this activity
[WRITER TO CONSTRUCT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

## The Scenario

[WRITER TO CONSTRUCT]
- Continued from the last activity (C7M4L3A2: Filters and Facets)
- You work at a large grocery company with many different brands
- You want to share some visuals at a presentation on supermarket trends
- Now, you want to annotate and save some of the visualizations that you created

## Step 1: Import your data

[WRITER TO EDIT]

If you haven't exited out of your RStudio since doing the last activity, [Placeholder Name: Aesthetics and Visualizations], then you can skip this step. Rerunning it won't be an issue either :)

Run the code below to read in the file 'hotel_bookings.csv' into a dataframe that you will use for your visualization. 

Note, we will name the dataframe 'hotel_bookings' to be clear on what the data is. 

If you experience errors, remember that you can search the internet and the RStudio community for help:
https://community.rstudio.com/#

The data is originally from the article Hotel Booking Demand Datasets (https://www.sciencedirect.com/science/article/pii/S2352340918315191), written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.

The data was downloaded and cleaned by Thomas Mock and Antoine Bichat for #TidyTuesday during the week of February 11th, 2020 (https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md).

You can learn more about the dataset here:
https://www.kaggle.com/jessemostipak/hotel-booking-demand

```{r load data}
hotel_bookings <- read.csv("hotel_bookings.csv")
```

## Step 2: Refresh Your Memory

[WRITER TO EDIT]
Use head() and colnames() to refresh your memory and what the dataset contains. Run two code chunks below to look at a sample of the data and also see all the column names.

```{r look at data}
head(hotel_bookings)
```

```{r look at column names}
colnames(hotel_bookings)
```

## Step 3: Install and load the 'ggplot2' and 'tidyverse' packages (optional)
Remember, if you haven't already installed and loaded the 'ggplot2' package, you'll need to do that before you can use the ggplot() function. You only have to do this once though, not every time you call ggplot().

You can skip this step if you haven't closed your RStudio account since doing the last activity - otherwise, you can hit 'cancel' when the warning message pops up telling you that have already downloaded the ggplot2 package.

If you have - you can run the code chunk below to install and load 'ggplot2' - this may take a few minutes!

```{r loading and installing ggplot2, echo=FALSE, message=FALSE}
install.packages('ggplot2')
library(ggplot2)
```

If you have - you can run the code chunk below to install and load 'tidyverse' - this may take a few minutes!
```{r install and download tidyverse}
install.packages('tidyverse')
library(tidyverse)
```

## Step 4: Annotating your chart

[WRITER TO EDIT]
Your stakeholder says "I really want you to share that plot breaking down payment type by city, because that will really inform how we target promotions going forward. Can you create a cleaned and labeled version of that and save it as a png file for me to include?"

As a refresher, here's the chart you created before.
```{r faceting a plot}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = market_segment)) +
  facet_wrap(~hotel)
```
But it's not super clear where this data is from, what the main takeaway, or even what the data is showing if you're not familiar with the process that you and your stakeholder took to get here - that's why we need to leverage annotations!

The first step should be adding a title - that's often the first thing people will pay attention to when looking at a data visualization. To do that, we add labs() at the end and then add a title within that.
```{r faceting a plot with a title}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = market_segment)) +
  facet_wrap(~hotel) +
  labs(title="Comparison of market segments by hotel type for hotel bookings")
```

You also want to add another detail about what time period this data is from. To do this, you need to first figure out when the data is from!

You realize you can use the min() function on the year column in the data.

```{r earliest year}
min(hotel_bookings$arrival_date_year)
```
 
And the same for the max() function!
```{r latest year}
max(hotel_bookings$arrival_date_year)
```

But you'll need to save them as variables in order to easily use them in your labeling - the following code chunk creates two of those variables!
```{r latest date}
mindate <- min(hotel_bookings$arrival_date_year)
maxdate <- max(hotel_bookings$arrival_date_year)
```

Now, we'll add in a subitle useing 'subtitle=' in the labs() function. And then, we'll use the paste0() function to use our newly created variables in our labels. This is really handy, because if the data gets updated and there is more recent data added, we don't have to change the code below because the variables are dynamic.

```{r city bar chart with timeframe}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = market_segment)) +
  facet_wrap(~hotel) +
  labs(title="Comparison of market segments by hotel type for hotel bookings",
       subtitle=paste0("Data from: ", mindate, " to ", maxdate))
```

Hmmm, you decide that's displaying the technical details a little too prominently. You don't want that to be the second thing people notice when looking at the presentation. You decide to switch the 'subtitle' to a 'caption' which will show up in the bottom right corner instead.

```{r city bar chart with timeframe as caption}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = market_segment)) +
  facet_wrap(~hotel) +
  labs(title="Comparison of market segments by hotel type for hotel bookings",
       caption=paste0("Data from: ", mindate, " to ", maxdate))
```

That's better! Now you want to clean up the x and y axis labels to make sure it's really clear what people are looking at. To do that, we add to the labs() function and use x= and y=. Feel free to change the text of the label and play around with it.

```{r city bar chart with x and y axis}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = market_segment)) +
  facet_wrap(~hotel) +
  labs(title="Comparison of market segments by hotel type for hotel bookings",
       caption=paste0("Data from: ", mindate, " to ", maxdate),
       x="Market Segment",
       y="Number of Bookings")
```


## Step 5: Saving your chart

Now, it's time to save what you just created so you can easily share with stakeholders!

Remember, the ggsave() function is used to save the last plot that was generated, so if you have run something after running lines 135-143 above, then run that code chunk again. 

And then run the following code chunk to save that plot as a png file named 'city_payment_chart', which makes it clear to your stakeholders what the png file contains. Now you should be able to see this file in your 'Files' tab in the bottom right of your screen! Check it out!

```{r save your plot}
ggsave('hotel_booking_chart.png')
```

[WRITER TO EDIT -> OPPORTUNITY FOR A QUIZ QUESTION]
Question: What are the default dimensions that ggsave() saved your image as?
Answer: 7x7 (run the code in line 155)

Let's say you wanted to make your chart bigger though and more of a rectangle to fit the powerpoint presentation, how would you do that? Run the code below to see if you can figure out what's going on!
```{r save your plot}
ggsave('hotel_booking_chart.png',
       width=16,
       height=8)
```
