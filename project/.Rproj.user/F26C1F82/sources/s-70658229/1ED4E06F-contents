---
title: "Lesson 3: Filters Solutions"
output: html_document
---

## Filters and facets solutions
This document  contains the solutions for the filters and facets activity. You can use these solutions to check your work and ensure that your code is correct or troubleshoot your code if it is returning errors. If you haven't completed the activity yet, we suggest you go back and finish it before reading the solutions.

If you experience errors, remember that you can search the internet and the RStudio community for help:
https://community.rstudio.com/#

## Step 1: Import your data

Run the code below to read in the file 'hotel_bookings.csv' into a data frame: 

```{r}
hotel_bookings <- read.csv("hotel_bookings.csv")
```

## Step 2: Refresh Your Memory

By now, you are pretty familiar with this data set. But you can refresh your memory with the `head()` and `colnames()` functions. Run two code chunks below to get at a sample of the data and also preview all the column names:

```{r look at data}
head(hotel_bookings)
```

```{r look at column names}
colnames(hotel_bookings)
```

## Step 3: Install and load the 'ggplot2' package (optional)

If you haven't already installed and loaded the `ggplot2` package, you will need to do that before you can use the `ggplot()` function. You only have to do this once though, not every time you call `ggplot()`.

You can also skip this step if you haven't closed your RStudio account since doing the last activity. If you aren't sure, you can run the code chunk and hit 'cancel' if the warning message pops up telling you that have already downloaded the `ggplot2` package.

Run the code chunk below to install and load `ggplot2`. This may take a few minutes!

```{r loading and installing ggplot2, echo=FALSE, message=FALSE}
install.packages('ggplot2')
library(ggplot2)
```

## Step 4: Making many different charts

As a refresher, here's the scatter plot you created earlier.

```{r creating a plot}
ggplot(data = hotel_bookings) +
  geom_point(mapping = aes(x = lead_time, y = children))
```

Now, you can add color to differentiate the hotel types. You can do this by adding `color=hotel` within the `aes()` argument:

```{r color by type}
ggplot(data = hotel_bookings) +
  geom_point(mapping = aes(x = lead_time, y = children, color=hotel))
```

Your stakeholder mentions that they are having trouble reading this chart. They ask if you can create a box plot with just the total and city data. You can create this with the code chunk below: 

```{r boxplot with city and total}
ggplot(data = hotel_bookings, aes(x=hotel, y=lead_time)) +
  geom_boxplot()
```

You decide to try a bar chart with different colors representing the hotel type; each bar will represent a market segment: 

```{r city bar chart}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = hotel, fill=market_segment))
```

After creating this bar chart, you realize that this makes the metrics harder to compare. To address this, you try a facet: 

```{r faceting a plot}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = market_segment)) +
  facet_wrap(~hotel)
```

Create a data set that just includes the data you want using the `filter()` function: 
```{r filtering a dataset to just city hotels that are online TA}
onlineta_city_hotels <- filter(hotel_bookings, 
                           (hotel_bookings$hotel=="City Hotel" & 
                             hotel_bookings$market_segment=="Online TA"))
```

You can get the new data frame you created using the`view` function and the name of the new data frame, which is `onlineta_city_hotesl`:

```{r View}
View(onlineta_city_hotels)
```

You could use the pipe operator (%>%) to do this in steps! For that, you will need to have the `tidyverse` package installed and loaded. You may see a pop-up asking if you want to install; if that's the case, click 'Install.' This may take a few minutes!

If you already have done this because you're using the`tidyverse` package on your own, you can skip this code chunk.

```{r install and download tidyverse}
install.packages('tidyverse')
library(tidyverse)
```

Now that you have done that, check out how you can create the same exact data set. You will name it with `_v2` at the end:

```{r filtering a dataset to just Ewallet transactions in Yangon}
onlineta_city_hotels_v2 <- hotel_bookings %>%
  filter(hotel=="City Hotel") %>%
  filter(market_segment=="Online TA")
```

This code chunk generates the same data frame by using the `view()` function:

```{r view second dataframe}
View(onlineta_city_hotels_v2)
```

## Step 6: Use your new dataframe

Using the code from earlier, replace `variable_name` in the code chunk below with either `onlineta_city_hotels` or `onlineta_city_hotels_v2` to get the same chart for the specific set your stakeholder cares about:

```{r creating a plot part two}
ggplot(data = onlineta_city_hotels) +
  geom_point(mapping = aes(x = lead_time, y = children))
```

And now, to split by gender: 
- Replace 'variable_name' with the name of your filtered data set
- Replace 'variable_name2' with 'distribution_channel'

```{r faceting a plot}
ggplot(data = onlineta_city_hotels) +
  geom_point(mapping = aes(x = lead_time, y = children, color=distribution_channel))
```
