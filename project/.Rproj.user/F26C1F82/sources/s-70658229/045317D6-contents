---
title: 'C7M4L3A2: Filters and Facets'
output: html_document
---

## Background for this activity
[WRITER TO CONSTRUCT]
- This should be the same set of sentences before every activity most likely
- This can be in the text of the Coursera item (before learners click on the link)

## The Scenario

[WRITER TO CONSTRUCT]
- Continued from the last activity (C7M4L2A1_Aesthetics)
- You work at a large grocery company with many different brands
- You want to share some visuals at a presentation on supermarket trends
- Now, you want to show some visualizations that focus on different 'cuts' and highlights different parts of the data

## Step 1: Import your data

[WRITER TO EDIT]

If you haven't exited out of your RStudio since doing the last activity, [Placeholder Name: Aesthetics and Visualizations], then you can skip this step. Rerunning it won't be an issue either :)

Run the code below to read in the file 'hotel_bookings.csv' into a dataframe that you will use for your visualization. 

Note, we will name the dataframe 'hotel_bookings' to be clear on what the data is. 

If you experience errors, remember that you can search the internet and the RStudio community for help:
https://community.rstudio.com/#

The data is originally from the article Hotel Booking Demand Datasets (https://www.sciencedirect.com/science/article/pii/S2352340918315191), written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.

The data was downloaded and cleaned by Thomas Mock and Antoine Bichat for #TidyTuesday during the week of February 11th, 2020 (https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md).

You can learn more about the dataset here:
https://www.kaggle.com/jessemostipak/hotel-booking-demand

```{r load data}
hotel_bookings <- read.csv("hotel_bookings.csv")
```

## Step 2: Refresh Your Memory

[WRITER TO EDIT]
Use head() and colnames() to refresh your memory and what the dataset contains. Run two code chunks below to look at a sample of the data and also see all the column names.

```{r look at data}
head(hotel_bookings)
```

```{r look at column names}
colnames(hotel_bookings)
```

## Step 3: Install and load the 'ggplot2' package (optional)
Remember, if you haven't already installed and loaded the 'ggplot2' package, you'll need to do that before you can use the ggplot() function. You only have to do this once though, not every time you call ggplot().

You can skip this step if you haven't closed your RStudio account since doing the last activity - otherwise, you can hit 'cancel' when the warning message pops up telling you that have already downloaded the ggplot2 package.

If you have - you can run the code chunk below to install and load 'ggplot2' - this may take a few minutes!

```{r loading and installing ggplot2, echo=FALSE, message=FALSE}
install.packages('ggplot2')
library(ggplot2)
```

## Step 4: Making many different charts

[WRITER TO EDIT]

Your stakeholder wants to look at thinks by hotel type this time, they liked your scatterplot that you had shown them before - but they want to know if different cities might have different relationships.

As a refresher, here's the scatterplot you created earlier.
```{r creating a plot}
ggplot(data = hotel_bookings) +
  geom_point(mapping = aes(x = lead_time, y = children))
```

Now, we want to color by hotel type. Remember, we can do this by adding 'color=hotel' (the variable here is named 'hotel' in our data) within the aes() call.

```{r color by type}
ggplot(data = hotel_bookings) +
  geom_point(mapping = aes(x = lead_time, y = children, color=hotel))
```

Your stakeholder looks at it and says "that's a bit hard to read - what if we just did a boxplot looking at total and city?"

```{r boxplot with city and total}
ggplot(data = hotel_bookings, aes(x=hotel, y=lead_time)) +
  geom_boxplot()
```

"Ah yes, that's much better. Also, it looks like resort hotels have slightly shorter booking lead time"

[Writer to add more detail]

"What about market segments? Do those differ by hotel types?"

You think about what you've learned, and want to try a bar chart with different colors representing the hotel type and each bar being a market segment

```{r city bar chart}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = hotel, fill=market_segment))
```

Hm, that's kind of hard to compare, so you what if you tried a facet?

```{r faceting a plot}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = market_segment)) +
  facet_wrap(~hotel)
```

## Step 5: Filtering

Your stakeholder looks at the chart and says, "Wow! Let's just focus on city hotels. Can you you show me the same relationship between lead time and children for just city hotels that are Online TA?  Also the distribution channel split for the same thing?"

You think about it, and realize you have all the tools you need, so you break it down into the following two steps.

Step 1 is creating a dataset that just includes the data you want, so taking advantage of the filter() function!
```{r filtering a dataset to just city hotels that are online TA}
onlineta_city_hotels <- filter(hotel_bookings, 
                           (hotel_bookings$hotel=="City Hotel" & 
                             hotel_bookings$market_segment=="Online TA"))
```

Note that we use the '&' character to show that we want two different conditions to be true. Also, can specifify which column in the dataframe 'hotel_bookings' we're refrencing by using the '$' character after the name of the dataframe. In this case hotel and market_segment

You can see the new dataframe you created using the 'View' function and the name of the new dataframe, in this case 'onlineta_city_hotels'

```{r View}
View(onlineta_city_hotels)
```

There's another way to do this too, depending on your preference - we could use the pipe operator (%>%) to do this in steps! For that, you'll need to have the tidyverse package installed and loaded. You may see a pop-up asking if you want to install, if that's the case, click 'Install' This may take a few minutes!

If you already have done this because you're using the tidyvere package on your own, you can skip this code chunk!

```{r install and download tidyverse}
install.packages('tidyverse')
library(tidyverse)
```

Okay, now that we've done that, let's see how we can create the same exact dataset, and we'll name it the same thing but with '_v2' at the end.

```{r filtering a dataset to just Ewallet transactions in Yangon}
onlineta_city_hotels_v2 <- hotel_bookings %>%
  filter(hotel=="City Hotel") %>%
  filter(market_segment=="Online TA")
```

Notice how in the above, we use the %>% symbol to note the logical step 'and then' - first we start with the name of dataframe 'onlineta_city_hotels_v2' AND THEN we tell R to start with the original dataframe 'hotel_bookings' AND then we tell it to filter on the hotel column (when using the pipe, we don't need to repeat the dataframe with a $) AND THEN we tell it to filter on the market_segment column.

You can see that this generates the same dataframe by using the View() function for a quick look.

```{r view second dataframe}
View(onlineta_city_hotels_v2)
```

## Step 6: Use your new dataframe

We can use either of the dataframes we created above for our new plots that our stakeholder asked for (because remember, they're the same)!

So, let's revisit our code from earlier. Replace 'variable_name' in the code chunk below with either 'onlineta_city_hotels' or 'onlineta_city_hotels_v2' to see the same chart but just for this specific set your stakeholder cares about.

```{r creating a plot part two}
ggplot(data = variable_name) +
  geom_point(mapping = aes(x = lead_time, y = children))
```

And now, for splitting by Gender:
- Replace 'variable_name' with the name of your filtered dataset
- Replace 'variable_name2' with 'distribution_channel'

```{r faceting a plot}
ggplot(data = variable_name) +
  geom_point(mapping = aes(x = lead_time, y = children, color=variable_name2))
```

Your stakeholder is really pleased by how you were able to show all these different cuts of data, next up, they want you to help save and annotate some of these charts for a big strategy presentation the team is working on! Stay tuned!

## Activity Wrap Up
Note to editor - We will need to add a wrap up section at the end of all of these activities. 

Review what was learned and encourage learners to modify the rmd to do more creative things or work in RStudio using the code from here.

Also include reflective  components.